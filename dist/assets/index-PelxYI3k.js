import{A as y,S as R}from"./loadSts-Do196JbA.js";import{c as K,d as $,f as v,g as M,C as L,E as N,h as z,I as j,e as q,M as B,P as G,R as H,b as U,a as V}from"./loadSts-Do196JbA.js";import{s as f}from"./index-BZUxVIvz.js";import{a as P,C as Q}from"./index-BZUxVIvz.js";import"./index-BgOkvnv3.js";const m="us-east-1",p=e=>{if(typeof(e==null?void 0:e.Arn)=="string"){const t=e.Arn.split(":");if(t.length>4&&t[4]!=="")return t[4]}},T=async(e,t,o)=>{var c;const i=typeof e=="function"?await e():e,n=typeof t=="function"?await t():t;return(c=o==null?void 0:o.debug)==null||c.call(o,"@aws-sdk/client-sts::resolveRegion","accepting first of:",`${i} (provider)`,`${n} (parent client)`,`${m} (STS default)`),i??n??m},x=(e,t)=>{let o;return async i=>{var r,l,S;if(!o){const{logger:C=(r=e==null?void 0:e.parentClientConfig)==null?void 0:r.logger,region:d,requestHandler:u=(l=e==null?void 0:e.parentClientConfig)==null?void 0:l.requestHandler,credentialProviderLogger:A}=e,E=await T(d,(S=e==null?void 0:e.parentClientConfig)==null?void 0:S.region,A),I=!g(u);o=new t({region:E,requestHandler:I?u:void 0,logger:C})}const{Credentials:n,AssumedRoleUser:c}=await o.send(new y(i));if(!n||!n.AccessKeyId||!n.SecretAccessKey)throw new Error(`Invalid response from STS.assumeRoleWithWebIdentity call with role ${i.RoleArn}`);const a=p(c),s={accessKeyId:n.AccessKeyId,secretAccessKey:n.SecretAccessKey,sessionToken:n.SessionToken,expiration:n.Expiration,...n.CredentialScope&&{credentialScope:n.CredentialScope},...a&&{accountId:a}};return a&&f(s,"RESOLVED_ACCOUNT_ID","T"),f(s,"CREDENTIALS_STS_ASSUME_ROLE_WEB_ID","k"),s}},g=e=>{var t;return((t=e==null?void 0:e.metadata)==null?void 0:t.handlerProtocol)==="h2"},h=(e,t)=>t?class extends e{constructor(i){super(i);for(const n of t)this.middlewareStack.use(n)}}:e,k=(e={},t)=>x(e,h(R,t));export{P as $Command,K as AssumeRoleCommand,$ as AssumeRoleResponseFilterSensitiveLog,y as AssumeRoleWithWebIdentityCommand,v as AssumeRoleWithWebIdentityRequestFilterSensitiveLog,M as AssumeRoleWithWebIdentityResponseFilterSensitiveLog,L as CredentialsFilterSensitiveLog,N as ExpiredTokenException,z as IDPCommunicationErrorException,j as IDPRejectedClaimException,q as InvalidIdentityTokenException,B as MalformedPolicyDocumentException,G as PackedPolicyTooLargeException,H as RegionDisabledException,U as STS,R as STSClient,V as STSServiceException,Q as __Client,k as getDefaultRoleAssumerWithWebIdentity};
